/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_neocoretechs_cublas_Gemm */

#ifndef _Included_com_neocoretechs_cublas_Gemm
#define _Included_com_neocoretechs_cublas_Gemm
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_neocoretechs_cublas_Gemm
 * Method:    matrixDotProductD
 * Signature: (JII[DII[D[D)I
 */
JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_matrixDotProductD
  (JNIEnv*, jclass, jlong, jint, jint, jdoubleArray, jint, jint, jdoubleArray, jdoubleArray);

/*
 * Class:     com_neocoretechs_cublas_Gemm
 * Method:    matrixDotProductDBatch
 * Signature: (JIILjava/util/ArrayList;IILjava/util/ArrayList;Ljava/util/ArrayList;I)I
 */
JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_matrixDotProductDBatch
  (JNIEnv*, jclass, jlong, jint, jint, jobject, jint, jint, jobject, jobject, jint);

/*
 * Class:     com_neocoretechs_cublas_Gemm
 * Method:    matrixDotProductDStream
 * Signature: (JIILjava/util/ArrayList;IILjava/util/ArrayList;Ljava/util/ArrayList;I)I
 */
JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_matrixDotProductDStream
  (JNIEnv*, jclass, jlong, jint, jint, jobject, jint, jint, jobject, jobject, jint);

/*
 * Class:     com_neocoretechs_cublas_Gemm
 * Method:    matrixDotProductDCPU
 * Signature: (II[DII[D[D)I
 */
JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_matrixDotProductDCPU
  (JNIEnv*, jclass, jint, jint, jdoubleArray, jint, jint, jdoubleArray, jdoubleArray);

/*
 * Class:     com_neocoretechs_cublas_Gemm
 * Method:    matrixDotProductDCPUBatch
 * Signature: (IILjava/util/ArrayList;IILjava/util/ArrayList;Ljava/util/ArrayList;I)I
 */
JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_matrixDotProductDCPUBatch
  (JNIEnv*, jclass, jint, jint, jobject, jint, jint, jobject, jobject, jint);

/*
 * Class:     com_neocoretechs_cublas_Gemm
 * Method:    matrixDotProductF
 * Signature: (JII[FII[F[F)I
 */
JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_matrixDotProductF
  (JNIEnv*, jclass, jlong, jint, jint, jfloatArray, jint, jint, jfloatArray, jfloatArray);

/*
 * Class:     com_neocoretechs_cublas_Gemm
 * Method:    matrixDotProductFBatch
 * Signature: (JIILjava/util/ArrayList;IILjava/util/ArrayList;Ljava/util/ArrayList;I)I
 */
JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_matrixDotProductFBatch
  (JNIEnv*, jclass, jlong, jint, jint, jobject, jint, jint, jobject, jobject, jint);

/*
 * Class:     com_neocoretechs_cublas_Gemm
 * Method:    matrixDotProductFStream
 * Signature: (JIILjava/util/ArrayList;IILjava/util/ArrayList;Ljava/util/ArrayList;I)I
 */
JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_matrixDotProductFStream
  (JNIEnv*, jclass, jlong, jint, jint, jobject, jint, jint, jobject, jobject, jint);

/*
 * Class:     com_neocoretechs_cublas_Gemm
 * Method:    matrixDotProductFCPU
 * Signature: (II[FII[F[F)I
 */
JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_matrixDotProductFCPU
  (JNIEnv*, jclass, jint, jint, jfloatArray, jint, jint, jfloatArray, jfloatArray);

/*
 * Class:     com_neocoretechs_cublas_Gemm
 * Method:    matrixDotProductFCPUBatch
 * Signature: (IILjava/util/ArrayList;IILjava/util/ArrayList;Ljava/util/ArrayList;I)I
 */
JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_matrixDotProductFCPUBatch
  (JNIEnv*, jclass, jint, jint, jobject, jint, jint, jobject, jobject, jint);

/*
* Class:     com_neocoretechs_cublas_Gemm
* Method : matrixDotProductF16
* Signature : (LII[DII[D[D)I
*/
JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_matrixDotProductF16
(JNIEnv*, jclass, jlong, jint, jint, jfloatArray, jint, jint, jfloatArray, jfloatArray);

/*
 * Class:     com_neocoretechs_cublas_Gemm
 * Method:    matrixDotProductF16Batch
 * Signature: (JIILjava/util/ArrayList;IILjava/util/ArrayList;Ljava/util/ArrayList;I)I
 */
JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_matrixDotProductF16Batch
(JNIEnv*, jclass, jlong, jint, jint, jobject, jint, jint, jobject, jobject, jint);

/*
* Class:  com_neocoretechs_cublas_Gemm
* Method: matrixDotProductF32StridedBatch
* Signature : (JIILjava/util/ArrayList;IILjava/util/ArrayList;Ljava/util/ArrayList;I)I
*/
JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_matrixDotProductF32StridedBatch
(JNIEnv*, jclass, jlong, jint, jint, jobject, jint, jint, jobject, jobject, jint);

/*
* Class:  com_neocoretechs_cublas_Gemm
* Method: matrixDotProductF16StridedBatch
* Signature : (JIILjava/util/ArrayList;IILjava/util/ArrayList;Ljava/util/ArrayList;I)I
*/
JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_matrixDotProductF16StridedBatch
(JNIEnv*, jclass, jlong, jint, jint, jobject, jint, jint, jobject, jobject, jint);

JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_matrixDotProductF16StridedBatchFlat
(JNIEnv*, jclass, jlong, jint, jint, jfloatArray, jint, jint, jfloatArray, jfloatArray, jint);

JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_matrixDotProductF16StridedBatchFlat2
(JNIEnv*, jclass, jlong, jint, jint,  jfloatArray, jint, jint, jfloatArray, jfloatArray, jint);

/*
 * Class:     com_neocoretechs_cublas_Gemm
 * Method:    matrixDotProductF16Stream
 * Signature: (JIILjava/util/ArrayList;IILjava/util/ArrayList;Ljava/util/ArrayList;I)I
 */
JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_matrixDotProductF16Stream
(JNIEnv*, jclass, jlong, jint, jint, jobject, jint, jint, jobject, jobject, jint);

/*
 * Class:     com_neocoretechs_cublas_Gemm
 * Method:    cublasHandle
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_neocoretechs_cublas_Gemm_cublasHandle
  (JNIEnv*, jclass);

/*
 * Class:     com_neocoretechs_cublas_Gemm
 * Method:    cublasHandleDestroy
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_cublasHandleDestroy
  (JNIEnv*, jclass, jlong);

JNIEXPORT jlongArray JNICALL Java_com_neocoretechs_cublas_Gemm_cudaMemGetInfo(JNIEnv*, jclass);
/*
* Scalar dot product of 2 of float32 cublasSdot
*/
JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_sdot(JNIEnv*, jclass, jlong, jint, jfloatArray, jint, jfloatArray, jint, jfloatArray);
/*
* Upload slice for batch attention
*/
JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Attn_uploadSlice(JNIEnv*, jclass, jlong, jfloatArray, jlong, jlong, jint);
/*
* Download slice
*/
JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Attn_downloadSlice(JNIEnv*, jclass, jlong, jfloatArray, jlong, jlong, jint);
/*
* Allocate device memory for batch attention
*/
JNIEXPORT jlong JNICALL Java_com_neocoretechs_cublas_Attn_init(JNIEnv*, jclass, jlong, jint, jint, jint, jint, jint );

JNIEXPORT jlong JNICALL Java_com_neocoretechs_cublas_Attn_getDQ(JNIEnv*, jclass, jlong);

JNIEXPORT jlong JNICALL Java_com_neocoretechs_cublas_Attn_getDK(JNIEnv*, jclass, jlong);

JNIEXPORT jlong JNICALL Java_com_neocoretechs_cublas_Attn_getDV(JNIEnv*, jclass, jlong);

JNIEXPORT jlong JNICALL Java_com_neocoretechs_cublas_Attn_getDS(JNIEnv*, jclass, jlong);

JNIEXPORT jlong JNICALL Java_com_neocoretechs_cublas_Attn_getDO(JNIEnv*, jclass, jlong);

JNIEXPORT void JNICALL Java_com_neocoretechs_cublas_Attn_destroy(JNIEnv*, jclass, jlong);

JNIEXPORT jfloatArray JNICALL Java_com_neocoretechs_cublas_Attn_softMax(JNIEnv*, jclass, jfloatArray, jint, jint);

JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Attn_attentionFp32(JNIEnv*, jclass, jlong,
	jobject, jint, jobject, jint, jobject, jint, jobject, jint, 
	jobject, jobject, jobject);

JNIEXPORT jlong JNICALL Java_com_neocoretechs_cublas_Attn_initContext(JNIEnv*, jclass , jlong, jint, jint, jint, jint);

JNIEXPORT void JNICALL Java_com_neocoretechs_cublas_Attn_freeContext(JNIEnv*, jclass, jlong);

JNIEXPORT jlong JNICALL Java_com_neocoretechs_cublas_Gemm_cudaMallocBytes(JNIEnv*, jclass, jlong);

JNIEXPORT void JNICALL Java_com_neocoretechs_cublas_Gemm_cudaFreePtr(JNIEnv*, jclass, jlong);

JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_cudaMemcpyHtoD(JNIEnv*, jclass, jlong, jobject, jlong);

JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_cudaMemcpyDtoH(JNIEnv*, jclass, jobject, jlong, jlong);

JNIEXPORT jint JNICALL Java_com_neocoretechs_cublas_Gemm_sdotDevice(JNIEnv*, jclass, jlong, jint, jlong, jint, jlong, jint, jlong);

JNIEXPORT jlong JNICALL Java_com_neocoretechs_cublas_Attn_convertBufferToFloat(JNIEnv*, jclass, jobject, jobject, jint, jint, jint, jint);
#ifdef __cplusplus
}
#endif
#endif
